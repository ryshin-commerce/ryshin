### About Modifiers

Modifiers in modulr.css make partial or minor changes to elements, content or modules. 
In this documentation we will show examples and api of modifier.css core module.

You can extend modifier.css core module by creating your own modifier module. 
You will also find that many third party modules have their own modifier.css. 
It is considered the best practice to always separate main and modifier styles of a module. 
For more info on how to create modules, please checkout Get Started module section.

> When creating your own modifiers make sure that you stick to modulr.css best practice and 
> always make sure that you're not repeating what's already in the core modifier.css module.

Following modulr.css best practice the most important thing is naming convention. 
In modulr.css we use css property and sometimes value for our class naming convention, 
like for example; let's say you are creating a padding modifier which will add some 
padding to your elements, it's important to name it as the css property followed by the value. 
See example below.

```
.padding-top-20{ padding-top: 20px }
```

In example above you can see that we're creating a modifier which will add padding-top of 
20px to any element that we chose to apply this modifier to by adding it as a class property on that certain element.

> By naming our modifier as we did in example above; .padding-top-20, everybody who chooses to use this modifier 
> knows what this modifier does since its naming convention is pretty obvious

There are also modifiers which remove values, those modifiers are called 'Negative Modifiers'. 
Negative modifiers start with -*property eg: .-padding-top will remove padding top of certain 
element that modifier class is applied to.

Modulr.css also includes behavior type modifiers. Behavior type modifiers start with: .hover- , .focus- , 
and .active-. Text modifiers will start with .text- , fill modifiers with .fill-, border modifiers with .border- etc.

When using behavior modifiers combined with other modifiers, it's important that behavior modifiers always come 
at the first place. For example if you want to; on hover certain element to change the text color of that element, 
it's important that behavior property is always at the first place eg: .hover-text-red will on element:hover 
change text color to red. 

You can learn more about modulr.css modifier best practice by looking at api for some of the core modifiers. 
See modifier api's below.

### Text Modifiers

There are two type of text modifiers, a element text modifier which is applied to any element and a parent-child 
text modifier which is applied to an element that contains child elements which should be affected by the modifier.

Parent-child text modifiers start with .href-, these are mostly used for a parent's children #href elements 
since href elements need a direct class attachment in order for style to take effect.

When you use for example .hover-href-text-underline on a parent element, the property will be applied to 
all of the parent's #href children. That way if you have lot's of href elements that need to have that 
property (modifier class) applied to, you don't have to waste time adding that modifier class manually 
to all of the href elements, you can add it once to the parent element instead. See example below.

##### html
----------

```
<p class="href-text-red hover-href-text-blue hover-href-text-underline">
  The <a href="#">Charlize Theron Africa Outreach Project</a> 
  (CTAOP) helps African youth keep themselves safe from <a href="#">AIDS.</a> 
  The Project was created in 2007 by Charlize Theron, Academy Award winning actor 
  and UN  Messenger of Peace.
</p>
```

##### Text Alignment

The text-align property is used to set the horizontal alignment of a text. 
A text can be left or right aligned, centered, or justified.

<table class="bordered border-teal">
  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-125">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Alignment</td>
      <td class="text-red">.text-center</td>
      <td>any</td>
      <td>Centers the text. eg: text-align: center;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Alignment</td>
      <td class="text-red">.text-left</td>
      <td>any</td>
      <td>eg: text-align: left;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Alignment</td>
      <td class="text-red">.text-right</td>
      <td>any</td>
      <td>eg: text-align: right;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Alignment</td>
      <td class="text-red">.text-justify</td>
      <td>any</td>
      <td>Each line is stretched so that every line has equal width.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Text Style

The font-style property is used to specifies the font style for a text. Text style property 
class can be used on an element or its parent element.

<table class="bordered border-teal">
  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-125">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.text-normal</td>
      <td>any</td>
      <td>Displays a normal font style. This is default.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.href-text-normal</td>
      <td>any except href</td>
      <td>When used on parent all of the #href children elements will display a normal font style.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.text-italic</td>
      <td>any</td>
      <td>Displays an italic font style</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.href-text-italic</td>
      <td>any except href</td>
      <td>When used on parent all of the #href children elements will display an italic font style.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.text-oblique</td>
      <td>any</td>
      <td>Displays an oblique font style</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.href-text-oblique</td>
      <td>any except href</td>
      <td>When used on parent all of the #href children elements will display an oblique font style.</td>
    </tr>
    <!-- Tr End -->
    
     <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.text-initial</td>
      <td>any</td>
      <td>Sets this property to its default value.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.href-text-initial</td>
      <td>any except href</td>
      <td>When used on parent all of the #href children elements will set this property to its default value.</td>
    </tr>
    <!-- Tr End -->
    
     <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.text-inherit</td>
      <td>any</td>
      <td>Inherits this property from its parent element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.href-text-inherit</td>
      <td>any except href</td>
      <td>When used on parent all of the #href children elements will Inherit this property from its parent element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Text Weight

The font-weight property is used to specifies the weight of a font. Text weight property class 
can be used on an element or its parent element.

<table class="bordered border-teal">
  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-125">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text-light</td>
      <td>any</td>
      <td>eg: font-weight: normal; Defines normal characters. This is default.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text-light</td>
      <td>any</td>
      <td>When used on parent, #href children will be defined as light characters.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text-strong</td>
      <td>any</td>
      <td>eg: font-weight: bold; Defines thick characters.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text-strong</td>
      <td>any</td>
      <td>When used on parent, #href children will be defined as thick characters.</td>
    </tr>
    <!-- Tr End -->
   
  </tbody>
</table>

##### Below you can find extra weight modifier classes used with the fontType specified in modulr.css

<table class="bordered border-teal">
  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-125">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text300</td>
      <td>any</td>
      <td>eg: font-weight: 300;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text300</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 300;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text400</td>
      <td>any</td>
      <td>eg: font-weight: 400;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text400</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 400;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text500</td>
      <td>any</td>
      <td>eg: font-weight: 5000;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text500</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 500;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text600</td>
      <td>any</td>
      <td>eg: font-weight: 600;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text600</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 600;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text700</td>
      <td>any</td>
      <td>eg: font-weight: 700;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text700</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 700;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.text800</td>
      <td>any</td>
      <td>eg: font-weight: 800;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Weight</td>
      <td class="text-red">.href-text800</td>
      <td>any</td>
      <td>When used on parent, #href children will have set font-weight: 800;</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Text Decoration

The text-decoration property is used to set or remove decorations from text. 
Text decoration property class can be used on an element or its parent element.

<table class="bordered border-teal">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.text-del</td>
      <td>any</td>
      <td>eg: text-decoration: line-through;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.href-text-del</td>
      <td>any except href</td>
      <td>When used on parent, line-through will be applied to all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.text-overline</td>
      <td>any</td>
      <td>eg: text-decoration: overline;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.href-text-overline</td>
      <td>any except href</td>
      <td>When used on parent, a overline will be applied to all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.text-underline</td>
      <td>any</td>
      <td>eg: text-decoration: underline;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Decoration</td>
      <td class="text-red">.href-text-underline</td>
      <td>any except href</td>
      <td>When used on parent, a underline will be applied to all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr class="blue text-white">
      <td>Hover Behavior</td>
      <td class="text-white mx-150">.hover-text-*decoration <br> .hover-href-text-*decoration</td>
      <td>any</td>
      <td>
        Text Decoration also supports hover behavior, just change 
        *decoration with any of the class decoration values you see above. eg: .hover-text-underline or 
        eg: .hover-href-text-underline.
      </td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Text Transformation

The text-transform property is used to specify uppercase and lowercase letters in a text. 
It can be used to turn everything into uppercase or lowercase letters, or capitalize the 
first letter of each word. Text transform property class can be used on an element or its parent element.

<table class="bordered border-teal">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-125">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.text-uppercase</td>
      <td>any</td>
      <td>Text to uppercase.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.href-text-uppercase</td>
      <td>any except href</td>
      <td>When used on parent, it will uppercase all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.text-lowercase</td>
      <td>any</td>
      <td>Text to lowercase.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.href-text-lowercase</td>
      <td>any except href</td>
      <td>When used on parent, it will lowercase all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.text-capitalize</td>
      <td>any</td>
      <td>Capitalize text.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Transform</td>
      <td class="text-red">.href-text-capitalize</td>
      <td>any except href</td>
      <td>When used on parent, it will capitalize all of the parents #href children.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

### Border Modifiers

##### Border Style

The border-style property is used for border styles. You can use a single class properties to 
build up your border in a modular way eg: .border *style .border-*size *color or you can use a 
direct border class style eg: .border-*style 
See examples below.

##### html
----------

```
<!-- Solid Start -->
  <div class="border solid border-2 red">
    .border .solid .border-2 .red
  </div>
<!-- Solid End -->

<!-- Dotted Start -->
  <div class="border dotted border-2 red">
    .border .dotted .border-2 .red
  </div>
<!-- Dotted End -->

<!-- Dashed Start -->
  <div class="border dashed border-2 red">
    .border .dashed .border-2 .red
  </div>
<!-- Dashed End -->
```

<table class="bordered border-teal margin-top">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">

    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.solid</td>
      <td>any</td>
      <td>Adds solid border style to element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.border-solid</td>
      <td>any</td>
      <td>Adds solid border style to element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.dotted</td>
      <td>any</td>
      <td>Adds dotted border style to element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.border-dotted</td>
      <td>any</td>
      <td>Adds dotted border style to element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.dashed</td>
      <td>any</td>
      <td>Adds dashed border style to element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.border-dashed</td>
      <td>any</td>
      <td>Adds dashed border style to element.</td>
    </tr>
    <!-- Tr End -->
    
     <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.double</td>
      <td>any</td>
      <td>Adds double border style to element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Style</td>
      <td class="text-red">.border-double</td>
      <td>any</td>
      <td>Adds double border style to element</td>
    </tr>
    <!-- Tr End -->

  </tbody>
</table>

##### Border Size

The border-width property specifies the width of the borders. The width is specified in px. 
eg: .border-*size. Size can be 1 increased by 1 up to 6. If you need a thicker border, 
just create your own modifier using the same naming conventions.

<table class="bordered border-teal">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">

    <!-- Tr Start -->
    <tr>
      <td>Size</td>
      <td class="text-red">.boreder-*size</td>
      <td>any</td>
      <td>Adds border-with to element, replace *size with any value from 1-6</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Border Display

There are also properties for specifying each (display) of the borders (top, right, bottom, left) 
For border display properties you can use a modulr approach .border *display *style .border-*size 
*color for example .border top solid .border-2 teal or you can use a single modifier class approach 
.border-*display. Just replace *display with (top, right, bottom or left)

<table class="bordered border-teal margin-top">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.horizontal</td>
      <td>any</td>
      <td>Displays horizontal borders (top &amp; bottom).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-h</td>
      <td>any</td>
      <td>Displays horizontal borders (top &amp; bottom).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.vertical</td>
      <td>any</td>
      <td>Displays vertical borders (left &amp; right).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-v</td>
      <td>any</td>
      <td>Displays vertical borders (left &amp; right).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.top</td>
      <td>any</td>
      <td>Displays only top border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-top</td>
      <td>any</td>
      <td>Displays only top border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.right</td>
      <td>any</td>
      <td>Displays only right border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-right</td>
      <td>any</td>
      <td>Displays only right border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.bottom</td>
      <td>any</td>
      <td>Displays only bottom border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-bottom</td>
      <td>any</td>
      <td>Displays only bottom border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.left</td>
      <td>any</td>
      <td>Displays only left border.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.border-left</td>
      <td>any</td>
      <td>Displays only left border.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Remove Border Display

We can remove border display by adding -*property negative modifier classes to an element. 
For example if you want to remove a top border from an element, you can add a .-border-top class to that element. 
See example below.

##### html
----------

```
<!-- First Example Start -->
  <div class=".border .solid .border-2 .danger">
  .border .solid .border-2 .danger
  </div>
<!-- First Example End -->

<!-- Remove Top Border Example Start -->
  <div class=".border .solid .border-2 .danger .-border-top">
  .border .solid .border-2 .danger .-border-top
  </div>
<!-- Remove Top Border Example End -->
```

##### Negative Border Classes

<table class="bordered border-red margin-top">

  <thead class="fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-h</td>
      <td>any</td>
      <td>Removes horizontal border display from element (top &amp; bottom).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-v</td>
      <td>any</td>
      <td>Removes vertical border display from element (left &amp; right).</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-top</td>
      <td>any</td>
      <td>Removes border top display from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-right</td>
      <td>any</td>
      <td>Removes border right display from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-bottom</td>
      <td>any</td>
      <td>Removes border bottom display from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.-border-left</td>
      <td>any</td>
      <td>Removes border left display from element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

### Shape Modifiers

##### Rounded Corners

The border-radius property specifies the rounded corners. We have a default modifier class .rounded which 
applies a border-radius of 3px. We also have default modifier classes .round and .circle and both of those
create a perfect circular shapes. Here below you can see some of the examples on how 
rounded corners can be applied in modulr.css

##### html
----------

```
<!-- Rounded Example Start -->
  <div class="rounded">
    .rounded
  </div>
<!-- Rounded Example End -->

<!-- Round Example Start -->
  <div class="round">
    .round
  </div>
<!-- Round Example End -->

<!-- Circle Example Start -->
  <div class="circle">
    .circle
  </div>
<!-- Circle Example End -->
```

As you can see in examples above, it's easy to create rounded corners using modulr.css. 
Instead of creating bunch of modifier classes which could influence different corner positions l
ike top, right, bottom and left, we can use .round, .rounded, .circle modifier classes on an 
element and then use negative -*property modifier classes on that same element to remove corners 
and so create interesting shapes. See example below.

##### html
----------

```
<!-- First Example Start -->
  <div class="rounded-10 -rounded-top-left -rounded-bottom-righ">
   .rounded-10 .-rounded-top-left .-rounded-bottom-right
  </div>
<!-- First Example End -->

<!-- Second Example Start -->
  <div class="round -rounded-top-right">
    .round .-rounded-top-right
  </div>
<!-- Second Example End -->

<!-- Third Example Start -->
  <div class="round -rounded-top-left">
    .round .-rounded-top-left
  </div>
<!-- Third Example End -->

<!-- Fourth Example Start -->
  <div class="round -rounded-bottom-left">
    .round .-rounded-bottom-left
  </div>
<!-- Fourth Example End -->
```

##### Rounded Corners

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">

  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.rounded</td>
    <td>any</td>
    <td>Adds rounded corners to an element; default is 2px;</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.circle</td>
    <td>any</td>
    <td>Create's perfect circular shape.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.round</td>
    <td>any</td>
    <td>Create's perfect circular shape.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.round-top</td>
    <td>any</td>
    <td>Adds top circular shape.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.round-right</td>
    <td>any</td>
    <td>Adds right circular shape.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.round-bottom</td>
    <td>any</td>
    <td>Adds bottom circular shape.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.round-left</td>
    <td>any</td>
    <td>Adds left circular shape.</td>
  </tr>
  <!-- Tr End -->

  </tbody>
</table>

##### Rounded Corner Sizes

By default .rounded modifier class adds rounded corners of 3px; You can use .rounded-*value 
modifier to decrease / increase rounded corner sizes. Just replace *value with a number 
from 2 increased by 2 up to 20;

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">

  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.rounded-*value</td>
    <td>any</td>
    <td>Changes the size of rounded corners, replace *value with a number from 2 increased by 2 up to 20 </td>
  </tr>
  <!-- Tr End -->
  
  </tbody>
</table>

##### Negative Shape Modifiers

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">

  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded</td>
    <td>any</td>
    <td>Removes rounded corners from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-top</td>
    <td>any</td>
    <td>Removes top rounded corners from an element.</td>
  </tr>
  <!-- Tr End -->
  
   <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-bottom</td>
    <td>any</td>
    <td>Removes bottom rounded corners from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-left</td>
    <td>any</td>
    <td>Removes left rounded corners from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-right</td>
    <td>any</td>
    <td>Removes right rounded corners from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-top-left</td>
    <td>any</td>
    <td>Removes top left rounded corner from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-top-right</td>
    <td>any</td>
    <td>Removes top right rounded cornes from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-bottom-left</td>
    <td>any</td>
    <td>Removes bottom left rounded corner from an element.</td>
  </tr>
  <!-- Tr End -->
  
  <!-- Tr Start -->
  <tr>
    <td>Radius</td>
    <td class="text-red">.-rounded-bottom-right</td>
    <td>any</td>
    <td>Removes bottom right rounded corner from an element.</td>
  </tr>
  <!-- Tr End -->
  
  </tbody>
</table>

### Position Modifiers

##### Floats And Clears

The float property specifies whether or not an element should float. 
The clear property is used to control the behavior of floating elements.

<table class="bordered border-teal">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.float-left</td>
      <td>any</td>
      <td>Pulls element to the left. eg: float: left;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.float-right</td>
      <td>any</td>
      <td>Pulls element to the right. eg: float: right;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.pull-left</td>
      <td>any</td>
      <td>Pulls element to the left. eg: float: left;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.pull-right</td>
      <td>any</td>
      <td>Pulls element to the right. eg: float: right;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Clear</td>
      <td class="text-red">.clear</td>
      <td>any</td>
      <td>No floating elements allowed on either the left or the right side</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Clear</td>
      <td class="text-red">.clear-left</td>
      <td>any</td>
      <td>No floating elements allowed on the left side.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Clear</td>
      <td class="text-red">.clear-right</td>
      <td>any</td>
      <td>No floating elements allowed on the right side.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Clear</td>
      <td class="text-red">.clear-initial</td>
      <td>any</td>
      <td>Sets this property to its default value.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Clear</td>
      <td class="text-red">.clear-inherit</td>
      <td>any</td>
      <td>Inherits this property from its parent element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Position

The position property specifies the type of positioning method used for an element (static, relative, fixed or absolute).

<table class="bordered border-teal">

  <thead class="fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.center</td>
      <td>any</td>
      <td>Center an element. eg: margin: 0 auto; great for layout / wrapper positioning.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.static</td>
      <td>any</td>
      <td>position: static;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.relative</td>
      <td>any</td>
      <td>position: relative;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.absolute</td>
      <td>any</td>
      <td>position: absolute;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.absolute-top</td>
      <td>any</td>
      <td>position: absolute; top: 0;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.absolute-right</td>
      <td>any</td>
      <td>position: absolute; right: 0;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.absolute-bottom</td>
      <td>any</td>
      <td>position: absolute; bottom: 0;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.absolute-left</td>
      <td>any</td>
      <td>position: absolute; left: 0;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed</td>
      <td>any</td>
      <td>position: fixed;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed-all</td>
      <td>any</td>
      <td>position: fixed; but will fill out the canvas of relative parent.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed-top</td>
      <td>any</td>
      <td>position: fixed; will stick to the top. Great for sticky navbars.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed-bottom</td>
      <td>any</td>
      <td>position: fixed; will stick at the bottom.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed-left</td>
      <td>any</td>
      <td>position: fixed; will stick on the left side. great for sticky sidebars</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.fixed-right</td>
      <td>any</td>
      <td>position: fixed; will stick on the right side. great for sticky sidebars</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

### Layout Modifiers

##### Clearfix

If an element is taller than the element containing it, and it is floated, it will overflow outside of its container.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Hack</td>
      <td class="text-red">.cf</td>
      <td>any</td>
      <td>The clearfix Hack - overflow: auto;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Hack</td>
      <td class="text-red">.clearfix</td>
      <td>any</td>
      <td>The clearfix Hack - overflow: auto;</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Display

The display property is the most important CSS property for controlling layout. 
The display property specifies if / how an element is displayed.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.show</td>
      <td>any</td>
      <td>Displays an element as a block element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.hide</td>
      <td>any</td>
      <td>The element will not be displayed at all.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.block</td>
      <td>any</td>
      <td>Displays an element as a block element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.inline</td>
      <td>any</td>
      <td>Displays an element as an inline element</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.inline-block</td>
      <td>any</td>
      <td>Displays an element as an inline-level block container.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.list-item</td>
      <td>any</td>
      <td>Let the element behave like a &lt;li&gt; element</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.run-in</td>
      <td>any</td>
      <td>Displays an element as either block or inline, depending on context.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.flex</td>
      <td>any</td>
      <td>Displays an element as an block-level flex container. CSS3</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.inline-flex</td>
      <td>any</td>
      <td>Displays an element as an inline-level flex container. CSS3</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.flex-center</td>
      <td>any</td>
      <td>Center an element. CSS3</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table</td>
      <td>any</td>
      <td>Let the element behave like a &lt;table&gt; element</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.inline-table</td>
      <td>any</td>
      <td>The element is displayed as an inline-level table</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-caption</td>
      <td>any</td>
      <td>Let the element behave like a &lt;caption&gt; element</td>
    </tr>
    <!-- Tr End -->
    
     <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-column-group</td>
      <td>any</td>
      <td>Let the element behave like a &lt;colgroup&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-header-group</td>
      <td>any</td>
      <td>Let the element behave like a &lt;thead&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-footer-group</td>
      <td>any</td>
      <td>Let the element behave like a &lt;tfoot&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-row-group</td>
      <td>any</td>
      <td>Let the element behave like a &lt;tbody&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-column</td>
      <td>any</td>
      <td>Let the element behave like a &lt;col&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-row</td>
      <td>any</td>
      <td>Let the element behave like a &lt;tr&gt; element</td>
    </tr>
    <!-- Tr End -->
    
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.table-cell</td>
      <td>any</td>
      <td>Let the element behave like a &lt;td&gt; element</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Display Behavior

You can use hover behavior to show or hide elements.

<table class="bordered border-blue">

  <thead class="text-13 fill-blue text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Hover Behavior</td>
      <td class="text-red">.hover-show</td>
      <td>any</td>
      <td>Show an hidden element as a block element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Hover Behavior</td>
      <td class="text-red">.hover-hide</td>
      <td>any</td>
      <td>Hide an element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Hover Behavior</td>
      <td class="text-red">.hover-children-show</td>
      <td>any</td>
      <td>On parent hover, show all of the children that have .hide class</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Hover Behavior</td>
      <td class="text-red">.hover-children-hide</td>
      <td>any</td>
      <td>On parent hover, hide all of the children that have  .show class</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Visibility

The visibility property specifies whether or not an element is visible.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.visible</td>
      <td>any</td>
      <td>The element is visible</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.hidden</td>
      <td>any</td>
      <td>The element is invisible (but still takes up space)</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.collapse</td>
      <td>any</td>
      <td>
        Only for table elements. collapse removes a row or column, but it does not affect the table layout. 
        The space taken up by the row or column will be available for other content.
      </td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Visibility Behavior

You can use hover behavior to specify whether or not an element is visible.

<table class="bordered border-blue">

  <thead class="text-13 fill-blue text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.hover-visible</td>
      <td>any</td>
      <td>On hover, set visibility to visible.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.hover-hidden</td>
      <td>any</td>
      <td>On hover set visibility to hidden.</td>
    </tr>
    <!-- Tr End -->
   
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.hover-children-visible</td>
      <td>any</td>
      <td>On parent hover, set visibility of all children with class of .hidden to visible.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.hover-children-hidden</td>
      <td>any</td>
      <td>On parent hover, set visibility of all children with class of .visible to hidden.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Overflow

The overflow property specifies what happens if content overflows an element's box.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-visible</td>
      <td>any</td>
      <td>The overflow is not clipped. It renders outside the element's box. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-hidden</td>
      <td>any</td>
      <td>The overflow is clipped, and the rest of the content will be invisible.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-scroll</td>
      <td>any</td>
      <td>The overflow is clipped, but a scroll-bar is added to see the rest of the content</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-auto</td>
      <td>any</td>
      <td>If overflow is clipped, a scroll-bar should be added to see the rest of the content.</td>
    </tr>
    <!-- Tr End -->
  </tbody>
</table>

##### Overflow Horizontal

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-x-visible</td>
      <td>any</td>
      <td>The overflow-x is not clipped. It renders outside the element's box. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-x-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-x-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-x-auto</td>
      <td>any</td>
      <td>If overflow-x is clipped, a scroll-bar should be added to see the rest of the content.</td>
    </tr>
    <!-- Tr End -->
  </tbody>
</table>

##### Overflow Vertical

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-100">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-y-visible</td>
      <td>any</td>
      <td>The overflow-y is not clipped. It renders outside the element's box. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-y-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-y-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.overflow-y-auto</td>
      <td>any</td>
      <td>If overflow-y is clipped, a scroll-bar should be added to see the rest of the content.</td>
    </tr>
    <!-- Tr End -->
  </tbody>
</table>

##### Overflow Behavior

You can use hover behaviors to specify overflow. eg: .hover-*overflow 
Just replace *overflow with any of the overflow modifier classes.

<table class="bordered border-blue">

  <thead class="text-13 fill-blue text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Hover Behavior</td>
      <td class="text-red">.hover-*overflow</td>
      <td>any</td>
      <td>On hover element add overflow. Replace *overflow with any of the overflow modifiers classes.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Dimensions

The height and width properties are used to set the height and width of an element.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.width-full <br> .full-width <br> .width-100</td>
      <td>any</td>
      <td>Using one of this classes; adds full width to element, width: 100%;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.width-auto <br> .auto-width</td>
      <td>any</td>
      <td>Using one of this classes; adds 100% width to element, width: auto;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.height-full <br> .full-height <br> .height-100</td>
      <td>any</td>
      <td>Using one of this classes; adds 100% height to element, height: 100%;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.height-auto <br> .auto-height</td>
      <td>any</td>
      <td>Using one of this classes; adds auto height to element, height: 100%;</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Margins

The CSS margin properties set the size of the white space outside the border. Margin sizes are using px, 
default margin is set to 10px; You can create your own margin modifier module using the same naming 
convention in case you need different margin sizes.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin</td>
      <td>any</td>
      <td>Adds margin to element. margin: 10px;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-h</td>
      <td>any</td>
      <td>Adds horizontal margin to element. margin: 0 10px;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-v</td>
      <td>any</td>
      <td>Adds vertical margin to element. margin: 10px 0;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-top</td>
      <td>any</td>
      <td>Adds top margin to element. margin-top: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-right</td>
      <td>any</td>
      <td>Adds right margin to element. margin-right: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-bottom</td>
      <td>any</td>
      <td>Adds bottom margin to element. margin-bottom: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.margin-left</td>
      <td>any</td>
      <td>Adds left margin to element. margin-left: 10px;</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Negative Margin Modifiers

With negative margin modifiers you can remove margin from an element.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin</td>
      <td>any</td>
      <td>Removes margin from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-h</td>
      <td>any</td>
      <td>Removes horizontal margin from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-v</td>
      <td>any</td>
      <td>Removes vertical margin from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-top</td>
      <td>any</td>
      <td>Removes top margin from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-right</td>
      <td>any</td>
      <td>Removes right margin from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-bottom</td>
      <td>any</td>
      <td>Removes bottom margin from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-margin-left</td>
      <td>any</td>
      <td>Removes left margin from element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Padding

The CSS padding properties are used to generate space around content. The padding properties set the size 
of the white space between the element content and the element border. 
Default padding in modulr.css is set to 10px.

Modulr.css also has .padding-*property-*size and .padding-*size modifiers *size can be from 5 increased 
by 5 up to 40. In case you need different padding size for your elements, you can create your own padding 
modifier using the same naming convention.

<table class="bordered border-teal margin-top">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding</td>
      <td>any</td>
      <td>Adds padding to element. padding: 10px;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-h</td>
      <td>any</td>
      <td>Adds horizontal padding to element. padding: 0 10px;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-v</td>
      <td>any</td>
      <td>Adds vertical padding to element. padding: 10px 0;</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-top</td>
      <td>any</td>
      <td>Adds top padding to element. padding-top: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-right</td>
      <td>any</td>
      <td>Adds right padding to element. padding-right: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-bottom</td>
      <td>any</td>
      <td>Adds bottom padding to element. padding-bottom: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-left</td>
      <td>any</td>
      <td>Adds left padding to element. padding-left: 10px;</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-*size</td>
      <td>any</td>
      <td>Adds padding to element, *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-h-*size</td>
      <td>any</td>
      <td>Adds horizontal padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-v-*size</td>
      <td>any</td>
      <td>Adds vertical padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-top-*size</td>
      <td>any</td>
      <td>Adds top padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-right-*size</td>
      <td>any</td>
      <td>Adds right padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-bottom-*size</td>
      <td>any</td>
      <td>Adds bottom padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.padding-left-*size</td>
      <td>any</td>
      <td>Adds left padding to element. *size can be from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Negative Padding Modifiers

With negative padding modifiers you can remove padding from an element.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding</td>
      <td>any</td>
      <td>Removes padding from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-h</td>
      <td>any</td>
      <td>Removes horizontal padding from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-v</td>
      <td>any</td>
      <td>Removes vertical padding from element.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-top</td>
      <td>any</td>
      <td>Removes top padding from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-right</td>
      <td>any</td>
      <td>Removes right padding from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-bottom</td>
      <td>any</td>
      <td>Removes bottom padding from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-left</td>
      <td>any</td>
      <td>Removes left padding from element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Gutter Modifiers

The CSS padding properties are used to generate gutter between content. Gutter modifiers are used mainly 
for creating gutter when using column based grid module.
In example below, you can see how we use .gutter-right-20 modifier class to create a gutter of 20px 
between sidebar and content. Because gutter modifier uses padding property, it's good to have a .inner 
div element inside your .col-* element. You can also create your own gutter modifier module using margin, 
but we recommend using padding gutters with an extra inner div element for better cross device support.

##### html
----------

```
<!-- Row Start -->
<div class="row">
  <!-- Sidebar Start -->
  <div class="col-3 gutter-right-20">
    <div class="inner purple">
      Sidebar
    </div>
  </div>
  <!-- Sidebar End -->
  <!-- Content Start -->
  <div class="col-9">
    <div class="inner pink">
      Content
    </div>
  </div>
  <!-- Content End -->
</div>
<!-- Row End -->
```

In example above you can see how we use .gutter-*property-*value direct on a .col-* element. 
Let's now see a example on how we can use .gutter-col-*value on a parent element and so create 
gutter between our child elements. Most of the time when using .col-* grid elements, we wrap these 
inside a .row wrapper. We can add .gutter-col-*value to our .row element and so create gutter 
between our .col-* elements. See example below.

##### html
----------

```
<!-- Row Start -->
<div class="row gutter-col-20">
  <!-- .col-4 start -->
  <div class="col-4">
    <div class="pink">
      .col-4
    </div>
  </div>
  <!-- .col-4 end -->
  <!-- .col-4 start -->
  <div class="col-4">
    <div class="pink">
      .col-4
    </div>
  </div>
  <!-- .col-4 end -->
  <!-- .col-4 start -->
  <div class="col-4">
    <div class="pink">
      .col-4
    </div>
  </div>
  <!-- .col-4 end -->
</div>
<!-- Row End -->
```

##### Parent - Child .col-* Gutters

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-5</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 5px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-10</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 10px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-15</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 15px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-20</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 20px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-25</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 25px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-30</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 30px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-35</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 35px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-col-40</td>
      <td>any</td>
      <td>When used on parent eg: .row element, it will create gutter of 40px between .col-* child elements.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Element Gutters

Using .gutter-*property-*value gutter modifiers we can add gutter to an element.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-*value</td>
      <td>any</td>
      <td>Adds gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-h-*value</td>
      <td>any</td>
      <td>Adds horizontal gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-v-*value</td>
      <td>any</td>
      <td>Adds vertical gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-top-*value</td>
      <td>any</td>
      <td>Adds top gutter to element. Replace *value with a value from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-right-*value</td>
      <td>any</td>
      <td>Adds right gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-bottom-*value</td>
      <td>any</td>
      <td>Adds bottom gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
     <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.gutter-left-*value</td>
      <td>any</td>
      <td>Adds left gutter to element. Replace *value with a number from 5 increased by 5 up to 40</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Negative Gutter Modifiers

With negative gutter modifiers you can remove gutter (padding) from an element.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter</td>
      <td>any</td>
      <td>Removes gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-h</td>
      <td>any</td>
      <td>Removes horizontal gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-v</td>
      <td>any</td>
      <td>Removes vertical gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-top</td>
      <td>any</td>
      <td>Removes top gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-right</td>
      <td>any</td>
      <td>Removes right gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-bottom</td>
      <td>any</td>
      <td>Removes bottom gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-gutter-left</td>
      <td>any</td>
      <td>Removes left gutter from element.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

### Tablet / Phone Modifiers

Using modulr.css mobile modifiers, you can specify different column display count, 
padding, margin and visibility of an element.

##### Tablet @media (max-width: 800px)

<table class="bordered border-teal margin-top">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>

  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.tablet-pull-left</td>
      <td>any</td>
      <td>Pull element to left. eg: float: left; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.tablet-pull-right</td>
      <td>any</td>
      <td>Pull element to right. eg: float: right; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Position Modifiers

<table class="bordered border-teal margin-top">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
  
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-center</td>
      <td>any</td>
      <td>Center an element eg: margin: 0 auto; when viewed on a tablet device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-relative</td>
      <td>any</td>
      <td>postion: relative; when viewed on a tablet device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-absolute</td>
      <td>any</td>
      <td>postion: absolute; when viewed on a tablet device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-fixed-all</td>
      <td>any</td>
      <td>position: fixed; when viewed on a tablet device, but will fill out the canvas of relative parent.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-fixed-top</td>
      <td>any</td>
      <td>position: fixed; when viewed on a tablet device,  will stick to the top. Great for sticky navbars.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-fixed-bottom</td>
      <td>any</td>
      <td>position: fixed; when viewed on a tablet device,  will stick to the top. Great for sticky navbars.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-fixed-left</td>
      <td>any</td>
      <td>position: fixed; when viewed on a tablet device,  will stick on the left side. great for sticky sidebars</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.tablet-fixed-right</td>
      <td>any</td>
      <td>position: fixed; when viewed on a tablet device,  will stick on the right side. great for sticky sidebars.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Dimensions Modifiers

The height and width properties are used to set the height and width of an element.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.tablet-full-width</td>
      <td>any</td>
      <td>Adds full width to element, width: 100%; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.tablet-auto-width</td>
      <td>any</td>
      <td>Adds 100% width to element, width: auto; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.tablet-full-height</td>
      <td>any</td>
      <td>Adds 100% height to element, height: 100%; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.tablet-auto-height</td>
      <td>any</td>
      <td>Adds auto height to element, height: 100%; when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>


##### Tablet Display Modifiers

The display property is the most important CSS property for controlling layout. 
The display property specifies if / how an element is displayed when viewed on a tablet device.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.tablet-show</td>
      <td>any</td>
      <td>Displays an element as a block element when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.tablet-hide</td>
      <td>any</td>
      <td>Hide an element when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.tablet-inline</td>
      <td>any</td>
      <td>Displays an element as an inline element when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.tablet-block</td>
      <td>any</td>
      <td>Displays an element as an block container when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.tablet-inline-block</td>
      <td>any</td>
      <td>Displays an element as an inline-level block container when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.tablet-hidden</td>
      <td>any</td>
      <td>The element is invisible (but still takes up space) when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.tablet-visible</td>
      <td>any</td>
      <td>The element is visible when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Overflow Modifiers

The overflow property specifies what happens if content overflows an element's box.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-visible</td>
      <td>any</td>
      <td>The overflow is not clipped. It renders outside the element's box when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-hidden</td>
      <td>any</td>
      <td>The overflow is clipped, and the rest of the content will be invisible when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-scroll</td>
      <td>any</td>
      <td>The overflow is clipped, but a scroll-bar is added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-auto</td>
      <td>any</td>
      <td>If overflow is clipped, a scroll-bar should be added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Overflow Horizontal

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-x-visible</td>
      <td>any</td>
      <td>The overflow-x is not clipped. It renders outside the element's box when viewed on a tablet device. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-x-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-x-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-x-auto</td>
      <td>any</td>
      <td>If overflow-x is clipped, a scroll-bar should be added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Overflow Vertical

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-y-visible</td>
      <td>any</td>
      <td>The overflow-y is not clipped. It renders outside the element's box when viewed on a tablet device. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-y-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-y-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.tablet-overflow-y-auto</td>
      <td>any</td>
      <td>If overflow-y is clipped, a scroll-bar should be added to see the rest of the content when viewed on a tablet device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Margin Modifiers

.tablet-margin-*property-*value is used to set margin on tablet devices. Default margin is set to 10px; 
You can create your own tablet margin modifier module, in case that you need different margin values.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin</td>
      <td>any</td>
      <td>Adds margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-h</td>
      <td>any</td>
      <td>Adds horizontal margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-v</td>
      <td>any</td>
      <td>Adds vertical margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-top</td>
      <td>any</td>
      <td>Adds top margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-right</td>
      <td>any</td>
      <td>Adds right margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-bottom</td>
      <td>any</td>
      <td>Adds bottom margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.tablet-margin-left</td>
      <td>any</td>
      <td>Adds left margin to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Negative Margin Modifiers

Use tablet margin negative modifiers to remove margin from an element when viewed on a tablet devices.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin</td>
      <td>any</td>
      <td>Removes margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-h</td>
      <td>any</td>
      <td>Removes horizontal margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-v</td>
      <td>any</td>
      <td>Removes vertical margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-top</td>
      <td>any</td>
      <td>Removes top margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-right</td>
      <td>any</td>
      <td>Removes right margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-bottom</td>
      <td>any</td>
      <td>Removes bottom margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-tablet-margin-left</td>
      <td>any</td>
      <td>Removes left margin from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>


##### Tablet Padding Modifiers

.tablet-padding-*property-*value is used to set padding on tablet devices. Default padding is set to 10px; 
You can create your own tablet padding modifier module, in case that you need different padding values.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding</td>
      <td>any</td>
      <td>Adds padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-h</td>
      <td>any</td>
      <td>Adds horizontal padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-v</td>
      <td>any</td>
      <td>Adds vertical padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-top</td>
      <td>any</td>
      <td>Adds top padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-right</td>
      <td>any</td>
      <td>Adds right padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-bottom</td>
      <td>any</td>
      <td>Adds bottom padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.tablet-padding-left</td>
      <td>any</td>
      <td>Adds left padding to element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Tablet Negative Padding Modifiers

Use tablet negative padding modifiers to remove padding from an element when viewed on a tablet devices.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-padding-margin</td>
      <td>any</td>
      <td>Removes padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-h</td>
      <td>any</td>
      <td>Removes horizontal padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-v</td>
      <td>any</td>
      <td>Removes vertical padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-top</td>
      <td>any</td>
      <td>Removes top padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-right</td>
      <td>any</td>
      <td>Removes right padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-bottom</td>
      <td>any</td>
      <td>Removes bottom padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-tablet-padding-left</td>
      <td>any</td>
      <td>Removes left padding from element when viewed on a tablet devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile @media (max-width: 603px)

<table class="bordered border-teal margin-top">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.mobile-pull-left</td>
      <td>any</td>
      <td>Pull element to left. eg: float: left; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Float</td>
      <td class="text-red">.mobile-pull-right</td>
      <td>any</td>
      <td>Pull element to right. eg: float: right; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Position Modifiers

<table class="bordered border-teal margin-top">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-center</td>
      <td>any</td>
      <td>Center an element eg: margin: 0 auto; when viewed on a mobile device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-relative</td>
      <td>any</td>
      <td>postion: relative; when viewed on a mobile device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-absolute</td>
      <td>any</td>
      <td>postion: absolute; when viewed on a mobile device</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-fixed-all</td>
      <td>any</td>
      <td>position: fixed; when viewed on a mobile device, but will fill out the canvas of relative parent.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-fixed-top</td>
      <td>any</td>
      <td>position: fixed; when viewed on a mobile device,  will stick to the top. Great for sticky navbars.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-fixed-bottom</td>
      <td>any</td>
      <td>position: fixed; when viewed on a mobile device,  will stick to the top. Great for sticky navbars.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-fixed-left</td>
      <td>any</td>
      <td>position: fixed; when viewed on a mobile device,  will stick on the left side. great for sticky sidebars</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Position</td>
      <td class="text-red">.mobile-fixed-right</td>
      <td>any</td>
      <td>position: fixed; when viewed on a mobile device,  will stick on the right side. great for sticky sidebars.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Dimensions Modifiers

The height and width properties are used to set the height and width of an element.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.mobile-full-width</td>
      <td>any</td>
      <td>Adds full width to element, width: 100%; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.mobile-auto-width</td>
      <td>any</td>
      <td>Adds 100% width to element, width: auto; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.mobile-full-height</td>
      <td>any</td>
      <td>Adds 100% height to element, height: 100%; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Dimension</td>
      <td class="text-red">.mobile-auto-height</td>
      <td>any</td>
      <td>Adds auto height to element, height: 100%; when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Display Modifiers

The display property is the most important CSS property for controlling layout. 
The display property specifies if / how an element is displayed when viewed on a mobile device.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.mobile-show</td>
      <td>any</td>
      <td>Displays an element as a block element when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.mobile-hide</td>
      <td>any</td>
      <td>Hide an element when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.mobile-inline</td>
      <td>any</td>
      <td>Displays an element as an inline element when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.mobile-block</td>
      <td>any</td>
      <td>Displays an element as an block container when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Display</td>
      <td class="text-red">.mobile-inline-block</td>
      <td>any</td>
      <td>Displays an element as an inline-level block container when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.mobile-hidden</td>
      <td>any</td>
      <td>The element is invisible (but still takes up space) when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Visibility</td>
      <td class="text-red">.mobile-visible</td>
      <td>any</td>
      <td>The element is visible when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Overflow Modifiers

The overflow property specifies what happens if content overflows an element's box.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-visible</td>
      <td>any</td>
      <td>The overflow is not clipped. It renders outside the element's box when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-hidden</td>
      <td>any</td>
      <td>The overflow is clipped, and the rest of the content will be invisible when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-scroll</td>
      <td>any</td>
      <td>The overflow is clipped, but a scroll-bar is added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-auto</td>
      <td>any</td>
      <td>If overflow is clipped, a scroll-bar should be added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Overflow Horizontal

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-x-visible</td>
      <td>any</td>
      <td>The overflow-x is not clipped. It renders outside the element's box when viewed on a mobile device. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-x-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-x-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-x-auto</td>
      <td>any</td>
      <td>If overflow-x is clipped, a scroll-bar should be added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Overflow Vertical

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-y-visible</td>
      <td>any</td>
      <td>The overflow-y is not clipped. It renders outside the element's box when viewed on a mobile device. </td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-y-hidden</td>
      <td>any</td>
      <td>The overflow-x is clipped, and the rest of the content will be invisible when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-y-scroll</td>
      <td>any</td>
      <td>The overflow-x is clipped, but a scroll-bar is added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Overflow</td>
      <td class="text-red">.mobile-overflow-y-auto</td>
      <td>any</td>
      <td>If overflow-y is clipped, a scroll-bar should be added to see the rest of the content when viewed on a mobile device.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>


##### Mobile Margin Modifiers

.mobile-margin-*property-*value is used to set margin on mobile devices. 
Default margin is set to 10px; You can create your own mobile margin modifier module, 
in case that you need different margin values.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin</td>
      <td>any</td>
      <td>Adds margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-h</td>
      <td>any</td>
      <td>Adds horizontal margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-v</td>
      <td>any</td>
      <td>Adds vertical margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-top</td>
      <td>any</td>
      <td>Adds top margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-right</td>
      <td>any</td>
      <td>Adds right margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-bottom</td>
      <td>any</td>
      <td>Adds bottom margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.mobile-margin-left</td>
      <td>any</td>
      <td>Adds left margin to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Negative Margin Modifiers

Use mobile margin negative modifiers to remove margin from an element when viewed on a mobile devices

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin</td>
      <td>any</td>
      <td>Removes margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-h</td>
      <td>any</td>
      <td>Removes horizontal margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-v</td>
      <td>any</td>
      <td>Removes vertical margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-top</td>
      <td>any</td>
      <td>Removes top margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-right</td>
      <td>any</td>
      <td>Removes right margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-bottom</td>
      <td>any</td>
      <td>Removes bottom margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Margin</td>
      <td class="text-red">.-mobile-margin-left</td>
      <td>any</td>
      <td>Removes left margin from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Padding Modifiers

.mobile-padding-*property-*value is used to set padding on mobile devices. 
Default padding is set to 10px; You can create your own mobile padding modifier module, 
in case that you need different padding values.

<table class="bordered border-teal">

  <thead class="text-13 fill-teal text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding</td>
      <td>any</td>
      <td>Adds padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-h</td>
      <td>any</td>
      <td>Adds horizontal padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-v</td>
      <td>any</td>
      <td>Adds vertical padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-top</td>
      <td>any</td>
      <td>Adds top padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-right</td>
      <td>any</td>
      <td>Adds right padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-bottom</td>
      <td>any</td>
      <td>Adds bottom padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.mobile-padding-left</td>
      <td>any</td>
      <td>Adds left padding to element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>

##### Mobile Negative Padding Modifiers

Use mobile negative padding modifiers to remove padding from an element when viewed on a mobile devices.

<table class="bordered border-red">

  <thead class="text-13 fill-red text-white">
    <tr>
      <th class="mx-90">Type</th>
      <th class="mx-150">Class</th>
      <th>Element</th>
      <th>Description</th>
    </tr>
  </thead>
  
  <tbody class="text500">
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-margin</td>
      <td>any</td>
      <td>Removes padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-h</td>
      <td>any</td>
      <td>Removes horizontal padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-v</td>
      <td>any</td>
      <td>Removes vertical padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-top</td>
      <td>any</td>
      <td>Removes top padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-right</td>
      <td>any</td>
      <td>Removes right padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-bottom</td>
      <td>any</td>
      <td>Removes bottom padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
    <!-- Tr Start -->
    <tr>
      <td>Padding</td>
      <td class="text-red">.-mobile-padding-left</td>
      <td>any</td>
      <td>Removes left padding from element when viewed on a mobile devices.</td>
    </tr>
    <!-- Tr End -->
    
  </tbody>
</table>
